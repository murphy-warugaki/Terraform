locals {
 vpc_id = "vpc-0cd38a3f97bea82f1"
 subnet_az1_id = "subnet-016ecb159efbacc12"
 subnet_az2_id = "subnet-02a537ba1cf2ad43e"
 subnet_az3_id = "subnet-0671d5bdee30a3f01"
}

# vpc
data "aws_vpc" "example" {
  id = local.vpc_id
}

# subnets
data "aws_subnet" "az1" {
  id = local.subnet_az1_id
}
data "aws_subnet" "az2" {
  id = local.subnet_az2_id
}
data "aws_subnet" "az3" {
  id = local.subnet_az3_id
}

# security_groups
module "http_sg" {
  source      = "./security_group"
  name        = "http-sg"
  vpc_id      = data.aws_vpc.example.id
  port        = 80
  cidr_blocks = ["0.0.0.0/0"]
}

module "https_sg" {
  source      = "./security_group"
  name        = "https-sg"
  vpc_id      = data.aws_vpc.example.id
  port        = 443
  cidr_blocks = ["0.0.0.0/0"]
}

resource "aws_lb" "example" {
  name                       = "test-ivy"

  # ALB or NLB (network)
  load_balancer_type         = "application"

  # for internet or only vpc
  # this time development is false , because internet
  internal                   = false

  # second
  idle_timeout               = 60

  # protect for production
  # 削除するときは一度falseにしてapply
  enable_deletion_protection = true

  subnets = [
    data.aws_subnet.az1.id,
    data.aws_subnet.az2.id,
    data.aws_subnet.az3.id,
  ]

/*
ログ保持するか確認
  access_logs {
    bucket  = aws_s3_bucket.alb_log.id
    enabled = true
  }
*/

  security_groups = [
    module.http_sg.security_group_id,
    module.https_sg.security_group_id
  ]
}

resource "aws_lb_target_group" "example" {
  name                 = "test-ivy"
  vpc_id               = data.aws_vpc.example.id
  port                 = 80
  protocol             = "HTTP"

  # EC2インスタンスやIPアドレス、Lambda関数などが指定できる
  # target_type          = "ip"

  # ターゲットを登録解除する前にALBが待機する時間
  deregistration_delay = 300

  health_check {
    # ヘルスチェックで使用するパス
    path                = "/"
    # 正常判定を行うまでのヘルスチェック実行回数
    healthy_threshold   = 2
    # 異常判定を行うまでのヘルスチェック実行回数
    unhealthy_threshold = 2
    # ヘルスチェックのタイムアウト時間（秒）
    timeout             = 3
    # ヘルスチェックの実行間隔（秒）
    interval            = 30
    # 正常判定を行うために使用するHTTPステータスコード
    matcher             = 200
    # traffic-portを使うと上で定義したポートが利用される
    port                = "traffic-port"
    protocol            = "HTTP"
  }

  # ALBとターゲットグループを同時に作成するとエラーになるので依存関係を持たせる
  depends_on = [aws_lb.example]
}

# route 53
data "aws_route53_zone" "example" {
   name = "test-ivy.hassyadai.com"
}

resource "aws_route53_record" "example" {
  zone_id = data.aws_route53_zone.example.zone_id
  name    = data.aws_route53_zone.example.name

  # ALIASレコード
  type    = "A"

  alias {
    name                   = aws_lb.example.dns_name
    zone_id                = aws_lb.example.zone_id
    evaluate_target_health = true
  }

  lifecycle {
    create_before_destroy = true
  }
}

# ssl証明関係
resource "aws_acm_certificate" "example" {
  domain_name               = data.aws_route53_zone.example.name

  # ドメイン名を追加したい場合
  subject_alternative_names = []

  # ドメインの所有権の検証方法 email or dns
  validation_method         = "DNS"

  # リソースを作成してから、リソースを削除する
  lifecycle {
    create_before_destroy = false
  }
}

resource "aws_route53_record" "certificate" {
  name    = aws_acm_certificate.example.domain_validation_options[0].resource_record_name
  type    = aws_acm_certificate.example.domain_validation_options[0].resource_record_type
  records = [aws_acm_certificate.example.domain_validation_options[0].resource_record_value]
  zone_id = data.aws_route53_zone.example.id
  ttl     = 60
}

# apply時にSSL証明書の検証が完了するまで待ってくれる
resource "aws_acm_certificate_validation" "example" {
  certificate_arn         = aws_acm_certificate.example.arn
  validation_record_fqdns = [aws_route53_record.certificate.fqdn]
}

resource "aws_launch_configuration" "example" {
    image_id = "ami-04b2d1589ab1d972c"
    instance_type = "t2.micro"
    security_groups = [
      module.http_sg.security_group_id,
      module.https_sg.security_group_id
    ]

    user_data = <<-EOF
                #! /bin/bash
                sudo yum update
                sudo yum install -y httpd
                sudo chkconfig httpd on
                sudo service httpd start
                echo "<h1>hello world</h1>" | sudo tee /var/www/html/index.html
                EOF

    lifecycle {
        create_before_destroy = true
    }
}

data "aws_availability_zones" "all" {}

# autoscaling
resource "aws_autoscaling_group" "example" {
    name = "test-ivy"
    min_size = 1
    max_size = 6
    health_check_type = "ELB"
    force_delete      = true

    launch_configuration = aws_launch_configuration.example.id
    availability_zones   = data.aws_availability_zones.all.names

    vpc_zone_identifier  = [
      data.aws_subnet.az1.id,
      data.aws_subnet.az2.id,
      data.aws_subnet.az3.id
    ]

    target_group_arns = [aws_lb_target_group.example.arn]

    tag {
        key = "Name"
        value = "test-ivy_asg"
        # 生成されたインスタンスへのタグ付け
        propagate_at_launch = true
    }

    lifecycle {
        create_before_destroy = true
    }
}

# scale out
resource "aws_autoscaling_policy" "scale_out" {
    name = "CPU-High"
    scaling_adjustment = 1
    adjustment_type = "ChangeInCapacity"
    cooldown = 300
    autoscaling_group_name = aws_autoscaling_group.example.name
}

# scale in
resource "aws_autoscaling_policy" "scale_in" {
    name = "CPU-Low"
    scaling_adjustment = -1
    adjustment_type = "ChangeInCapacity"
    cooldown = 300
    autoscaling_group_name = aws_autoscaling_group.example.name
}

# scale out rule
resource "aws_cloudwatch_metric_alarm" "scale_out" {
    alarm_name = "CPU-High-30"
    comparison_operator = "GreaterThanOrEqualToThreshold"
    evaluation_periods = "1"
    # 監視項目
    metric_name = "CPUUtilization"
    namespace = "AWS/EC2"
    period = "300"
    statistic = "Average"
    threshold = "30"
    dimensions = {
        AutoScalingGroupName = aws_autoscaling_group.example.name
    }
    alarm_actions = [aws_autoscaling_policy.scale_out.arn]
}

# scale in rule
resource "aws_cloudwatch_metric_alarm" "scale_in" {
    alarm_name = "CPU-Low-5"
    comparison_operator = "LessThanThreshold"
    evaluation_periods = "1"
    metric_name = "CPUUtilization"
    namespace = "AWS/EC2"
    period = "300"
    statistic = "Average"
    threshold = "5"
    dimensions = {
        AutoScalingGroupName = aws_autoscaling_group.example.name
    }
    alarm_actions = [aws_autoscaling_policy.scale_in.arn]
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.example.arn
  port              = "80"
  protocol          = "HTTP"

/*
  forward - リクエストを別のターゲットグループに転送
  fixed-response - 固定のHTTPレスポンスを応答
  redirect - 別のURLにリダイレクト”
*/
  default_action {
    type = "redirect"

    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}

resource "aws_lb_listener" "https" {
  load_balancer_arn = aws_lb.example.arn
  port              = "443"
  protocol          = "HTTPS"
  certificate_arn   = aws_acm_certificate.example.arn
  ssl_policy        = "ELBSecurityPolicy-2016-08"

/*
  forward - リクエストを別のターゲットグループに転送
  fixed-response - 固定のHTTPレスポンスを応答
  redirect - 別のURLにリダイレクト”
*/
  default_action {
    type = "fixed-response"

    fixed_response {
      content_type = "text/plain"
      message_body = "これは『HTTPSSSS』です"
      status_code  = "200"
    }
  }
}

