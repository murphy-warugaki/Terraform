locals {
 vpc_id = "vpc-0cd38a3f97bea82f1"
 subnet_az1_id = "subnet-016ecb159efbacc12"
 subnet_az2_id = "subnet-02a537ba1cf2ad43e"
 subnet_az3_id = "subnet-0671d5bdee30a3f01"
 subnet_private_az1_id = "subnet-00839cdb84a7e5153"
 subnet_private_az2_id = "subnet-01a943fd107e98c43"
 subnet_private_az3_id = "subnet-0b7a4ad6d5b04907d"
}

# vpc
data "aws_vpc" "example" {
  id = local.vpc_id
}

# public subnets
data "aws_subnet" "az1" {
  id = local.subnet_az1_id
}
data "aws_subnet" "az2" {
  id = local.subnet_az2_id
}
data "aws_subnet" "az3" {
  id = local.subnet_az3_id
}

# private subnets
data "aws_subnet" "private_az1" {
  id = local.subnet_private_az1_id
}
data "aws_subnet" "private_az2" {
  id = local.subnet_private_az2_id
}
data "aws_subnet" "private_az3" {
  id = local.subnet_private_az3_id
}

# security_groups
module "http_sg" {
  source      = "./security_group"
  name        = "http-sg"
  vpc_id      = data.aws_vpc.example.id
  port        = 80
  cidr_blocks = ["0.0.0.0/0"]
}

module "https_sg" {
  source      = "./security_group"
  name        = "https-sg"
  vpc_id      = data.aws_vpc.example.id
  port        = 443
  cidr_blocks = ["0.0.0.0/0"]
}

module "http_redirect_sg" {
  source      = "./security_group"
  name        = "http-redirect-sg"
  vpc_id      = data.aws_vpc.example.id
  port        = 8080
  cidr_blocks = ["0.0.0.0/0"]
}

resource "aws_lb" "example" {
  name                       = "test-ivy"

  # ALB or NLB (network)
  load_balancer_type         = "application"

  # for internet or only vpc
  # this time development is false , because internet
  internal                   = false

  # second
  idle_timeout               = 60

  # protect for production
  # 削除するときは一度falseにしてapply
  enable_deletion_protection = true

  subnets = [
    data.aws_subnet.az1.id,
    data.aws_subnet.az2.id,
    data.aws_subnet.az3.id,
  ]

/*
ログ保持するか確認
  access_logs {
    bucket  = aws_s3_bucket.alb_log.id
    enabled = true
  }
*/

  security_groups = [
    module.http_sg.security_group_id,
    module.https_sg.security_group_id,
    module.http_redirect_sg.security_group_id
  ]
}

# ヘルスチェックを行い、ECSサービスとALBを紐づかせる
resource "aws_lb_target_group" "example" {
  name                 = "test-ivy"

  # ターゲットグループを作成するVPC
  vpc_id               = data.aws_vpc.example.id

  # ALBからECSタスクのコンテナへトラフィックを振り分ける設定
  port                 = 80
  protocol             = "HTTP"

  # EC2インスタンスやIPアドレス(Fargate使用時)、Lambda関数などが指定できる
  target_type          = "ip"

  # ターゲットを登録解除する前にALBが待機する時間
  deregistration_delay = 300

  # コンテナへの死活監視設定
  health_check {
    # ヘルスチェックで使用するパス
    path                = "/"
    # 正常判定を行うまでのヘルスチェック実行回数
    healthy_threshold   = 2
    # 異常判定を行うまでのヘルスチェック実行回数
    unhealthy_threshold = 2
    # ヘルスチェックのタイムアウト時間（秒）
    timeout             = 3
    # ヘルスチェックの実行間隔（秒）
    interval            = 30
    # 正常判定を行うために使用するHTTPステータスコード
    matcher             = 200
    # traffic-portを使うと上で定義したポートが利用される
    port                = "traffic-port"
    protocol            = "HTTP"
  }

  # ALBとターゲットグループを同時に作成するとエラーになるので依存関係を持たせる
  depends_on = [aws_lb.example]
}

# route 53
data "aws_route53_zone" "example" {
   name = "test-ivy.hassyadai.com"
}

resource "aws_route53_record" "example" {
  zone_id = data.aws_route53_zone.example.zone_id
  name    = data.aws_route53_zone.example.name

  # ALIASレコード
  type    = "A"

  alias {
    name                   = aws_lb.example.dns_name
    zone_id                = aws_lb.example.zone_id
    evaluate_target_health = true
  }

  lifecycle {
    create_before_destroy = true
  }
}

# ssl証明関係
resource "aws_acm_certificate" "example" {
  domain_name               = data.aws_route53_zone.example.name

  # ドメイン名を追加したい場合
  subject_alternative_names = []

  # ドメインの所有権の検証方法 email or dns
  validation_method         = "DNS"

  # リソースを作成してから、リソースを削除する
  # 基本はリソースを削除してから、リソースを作成する
  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_route53_record" "certificate" {
  name    = aws_acm_certificate.example.domain_validation_options[0].resource_record_name
  type    = aws_acm_certificate.example.domain_validation_options[0].resource_record_type
  records = [aws_acm_certificate.example.domain_validation_options[0].resource_record_value]

  depends_on = [aws_acm_certificate.example]

  zone_id = data.aws_route53_zone.example.id

  ttl     = 60
}

# apply時にSSL証明書の検証が完了するまで待ってくれる
resource "aws_acm_certificate_validation" "example" {
  certificate_arn         = aws_acm_certificate.example.arn
  validation_record_fqdns = [aws_route53_record.certificate.fqdn]
}

# ALBに登録されているDNSへのアクセスを紐付ける
resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.example.arn
  port              = "80"
  protocol          = "HTTP"

/*
  forward - リクエストを別のターゲットグループに転送
  fixed-response - 固定のHTTPレスポンスを応答
  redirect - 別のURLにリダイレクト”
*/
  default_action {
    type = "fixed-response"

    fixed_response {
      content_type = "text/plain"
      message_body = "これは『HTTP』です"
      status_code  = "200"
    }

  }

  # リソースを作成してから、リソースを削除する
  lifecycle {
    create_before_destroy = false
  }
}

resource "aws_lb_listener" "https" {
  port              = "443"
  protocol          = "HTTPS"

  load_balancer_arn = aws_lb.example.arn

  certificate_arn   = aws_acm_certificate.example.arn

  ssl_policy        = "ELBSecurityPolicy-2016-08"

/*
  forward - リクエストを別のターゲットグループに転送
  fixed-response - 固定のHTTPレスポンスを応答
  redirect - 別のURLにリダイレクト”
*/
  default_action {
    type = "fixed-response"

    fixed_response {
      content_type = "text/plain"
      message_body = "これは『HTTPSSSS』です"
      status_code  = "200"
    }
  }
}

resource "aws_lb_listener" "redirect_http_to_https" {
  load_balancer_arn = aws_lb.example.arn
  port              = "8080"
  protocol          = "HTTP"
  default_action {
    type = "redirect"

    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}

# ALBがリクエストを受けた際、どのターゲットグループへリクエストを受け渡すかの設定
resource "aws_lb_listener_rule" "example" {
  # ルールを追加するリスナー
  listener_arn = aws_lb_listener.https.arn
  priority     = 100

  # 受け取ったトラフィックをターゲットグループへ受け渡す
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.example.arn
  }

  # ターゲットグループへ受け渡すトラフィックの条件
  condition {
    path_pattern {
      values = ["/*"]
    }
  }
}

variable "name" {
  type    = "string"
  default = "test-ivy"
}

variable "azs" {
  default = ["ap-northeast-1a", "ap-northeast-1c", "ap-northeast-1d"]
}

# ECSクラスタ
# ホストサーバーを束ねるリソース
# ECSサービスの大元
module "ecs_cluster" {
  source = "./ecs/cluster"

  name = var.name
}

# タスク定義
# どんなコンテナをどんな設定で動かすかを定義する
resource "aws_ecs_task_definition" "example" {
  # prefix
  family                   = "test-ivy"
  # 2vCPU
  cpu                      = "2048"
  # 4G
  memory                   = "4096"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  container_definitions    = file("./container_definitions.json")
  # DockerコンテナがCloudWatch Logsにログを投げられるようにする
  execution_role_arn       = module.ecs_task_execution_role.iam_role_arn
}

# ECSサービス
# タスクの管理
# ALBとタスクの架け橋
# タスク定義を元にタスク(コンテナ)を立ち上げ、そのコンテナとどのロードバランサ(ターゲットグループ, リスナー)を紐付ける
resource "aws_ecs_service" "example" {
  name                              = "test-ivy"
  cluster                           = module.ecs_cluster.cluster_arn
  # 起動するECSタスクのタスク定義
  task_definition                   = aws_ecs_task_definition.example.arn

  # 維持するタスク数
  # タスク定義をもとに起動したコンテナをタスクと呼ぶ
  desired_count                     = 2

  # Fargateをデータプレーンとして使用する
  launch_type                       = "FARGATE"

  platform_version                  = "1.3.0"

  # ヘルスチェックの猶予時間
  health_check_grace_period_seconds = 60

  # ネットワーク構成
  # ECSタスクへ設定するネットワークの設定
  network_configuration {
    # public ip の割り当て
    assign_public_ip = false
    security_groups  = [module.nginx_sg.security_group_id]

    subnets = [
      data.aws_subnet.private_az1.id,
      data.aws_subnet.private_az2.id,
      data.aws_subnet.private_az3.id,
    ]
  }

  # ECSタスクの起動後に紐付けるALBターゲットグループ
  # ターゲットグループ、コンテナの名前、ポート番号からロードバランサーと紐付け
  # 複数のコンテナをタスクで管理する場合は、最初にLBからリクエストを受け取るコンテナの値を指定
  load_balancer {
    target_group_arn = aws_lb_target_group.example.arn
    # containe_definitionsでnameをnginxにして、ここでもnginxを指定するのがベター
    container_name   = "example"
    container_port   = 80
  }

  lifecycle {
    ignore_changes = [task_definition]
  }
}

module "nginx_sg" {
  source      = "./security_group"
  name        = "nginx-sg"
  vpc_id      = data.aws_vpc.example.id
  port        = 80
  cidr_blocks = [data.aws_vpc.example.cidr_block]
}

resource "aws_cloudwatch_log_group" "for_ecs" {
  name              = "/ecs/example"
  # ログの保持期間
  retention_in_days = 180
}

data "aws_iam_policy" "ecs_task_execution_role_policy" {
  arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

#  ECSタスク実行IAMロールのポリシードキュメントの定義
data "aws_iam_policy_document" "ecs_task_execution" {
  # 既存のポリシーを継承
  source_json = data.aws_iam_policy.ecs_task_execution_role_policy.policy

  statement {
    effect    = "Allow"
    actions   = ["ssm:GetParameters", "kms:Decrypt"]
    resources = ["*"]
  }
}

# ECSタスク実行IAMロールの定義:
module "ecs_task_execution_role" {
  source     = "./iam_role"
  name       = "ecs-task-execution"
  # このiam_roleをecsで使うことを宣言する
  identifier = "ecs-tasks.amazonaws.com"
  policy     = data.aws_iam_policy_document.ecs_task_execution.json
}

# docker imageを保管するリポジトリ
resource "aws_ecr_repository" "example" {
  name = "test-ivy"
}

resource "aws_ecr_lifecycle_policy" "example" {
  repository = aws_ecr_repository.example.name

  policy = <<EOF
  {
    "rules": [
      {
        "rulePriority": 1,
        "description": "Keep last 30 release tagged images",
        "selection": {
          "tagStatus": "tagged",
          "tagPrefixList": ["release"],
          "countType": "imageCountMoreThan",
          "countNumber": 30
        },
        "action": {
          "type": "expire"
        }
      }
    ]
  }
EOF
}

# CodeBuildサービスロールのポリシードキュメントの定義
data "aws_iam_policy_document" "codebuild" {
  statement {
    effect    = "Allow"
    resources = ["*"]

    actions = [
      "s3:PutObject",
      "s3:GetObject",
      "s3:GetObjectVersion",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:GetRepositoryPolicy",
      "ecr:DescribeRepositories",
      "ecr:ListImages",
      "ecr:DescribeImages",
      "ecr:BatchGetImage",
      "ecr:InitiateLayerUpload",
      "ecr:UploadLayerPart",
      "ecr:CompleteLayerUpload",
      "ecr:PutImage",
    ]
  }
}

# CodeBuild用のIAMロール
module "codebuild_role" {
  source     = "./iam_role"
  name       = "codebuild"
  identifier = "codebuild.amazonaws.com"
  policy     = data.aws_iam_policy_document.codebuild.json
}

# CodeBuildプロジェクト
# CodePipelineから起動する
resource "aws_codebuild_project" "example" {
  name         = "test-ivy"
  service_role = module.codebuild_role.iam_role_arn

  source {
    type = "CODEPIPELINE"
  }

  artifacts {
    type = "CODEPIPELINE"
  }

  # ビルド環境
  environment {
    type            = "LINUX_CONTAINER"
    compute_type    = "BUILD_GENERAL1_SMALL"
    image           = "aws/codebuild/ubuntu-base:14.04"
    # docker コマンドを使うので権限付与
    privileged_mode = true
  }
}

data "aws_iam_policy_document" "codepipeline" {
  statement {
    effect    = "Allow"
    resources = ["*"]

    actions = [
      "s3:PutObject",
      "s3:GetObject",
      "s3:GetObjectVersion",
      "s3:GetBucketVersioning",
      "codebuild:BatchGetBuilds",
      "codebuild:StartBuild",
      "ecs:DescribeServices",
      "ecs:DescribeTaskDefinition",
      "ecs:DescribeTasks",
      "ecs:ListTasks",
      "ecs:RegisterTaskDefinition",
      "ecs:UpdateService",
      "iam:PassRole",
    ]
  }
}

module "codepipeline_role" {
  source     = "./iam_role"
  name       = "codepipeline"
  identifier = "codepipeline.amazonaws.com"
  policy     = data.aws_iam_policy_document.codepipeline.json
}

# 名前がユニークじゃないといけないので、dataで読んだ方がいいかも
resource "aws_s3_bucket" "artifact" {
  bucket = "test-ivy-artifact-pragmatic-terraform-on-aws"

  lifecycle_rule {
    enabled = true

    expiration {
      days = "180"
    }
  }
}

resource "aws_codepipeline" "example" {
  name     = "test-ivy"
  role_arn = module.codepipeline_role.iam_role_arn

  # githubからソースコードを取得する
  stage {
    name = "Source"

    action {
      name             = "Source"
      category         = "Source"
      owner            = "ThirdParty"
      provider         = "GitHub"
      version          = 1
      output_artifacts = ["Source"]

      configuration = {
        Owner                = "hassyadai"
        Repo                 = "Ivy"
        Branch               = "feature/nishimoto"
        PollForSourceChanges = false
      }
    }
  }

  # codebuildを実行してECRにDocker Imageをpushする
  stage {
    name = "Build"

    action {
      name             = "Build"
      category         = "Build"
      owner            = "AWS"
      provider         = "CodeBuild"
      version          = 1
      input_artifacts  = ["Source"]
      output_artifacts = ["Build"]

      configuration = {
        ProjectName = aws_codebuild_project.example.id
      }
    }
  }

  # ECSへdockerイメージをデプロイする
  stage {
    name = "Deploy"

    action {
      name            = "Deploy"
      category        = "Deploy"
      owner           = "AWS"
      provider        = "ECS"
      version         = 1
      input_artifacts = ["Build"]

      configuration = {
        ClusterName = module.ecs_cluster.cluster_name
        ServiceName = aws_ecs_service.example.name
        FileName    = "imagedefinitions.json"
      }
    }
  }

  artifact_store {
    location = aws_s3_bucket.artifact.id
    type     = "S3"
  }
}

resource "aws_codepipeline_webhook" "example" {
  name            = "test-ivy"
  target_pipeline = aws_codepipeline.example.name
  target_action   = "Source"
  authentication  = "GITHUB_HMAC"

  authentication_configuration {
    secret_token = "VeryRandomStringMoreThan20Byte!"
  }

  # 起動条件
  filter {
    json_path    = "$.ref"
    match_equals = "refs/heads/{Branch}"
  }
}

provider "github" {
  organization = "hassyadai"
}

resource "github_repository_webhook" "example" {
  repository = "Ivy"
  # name       = "web"

  configuration {
    url          = aws_codepipeline_webhook.example.url
    # secret_tokenと同じ値
    secret       = "VeryRandomStringMoreThan20Byte!"
    content_type = "json"
    insecure_ssl = false
  }

  events = ["push"]
}

# session manager
data "aws_iam_policy_document" "ec2_for_ssm" {
  source_json = data.aws_iam_policy.ec2_for_ssm.policy

  statement {
    effect    = "Allow"
    resources = ["*"]

    actions = [
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
      "ssm:GetParameter",
      "ssm:GetParameters",
      "ssm:GetParametersByPath",
      "kms:Decrypt",
    ]
  }
}

data "aws_iam_policy" "ec2_for_ssm" {
  arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
}

module "ec2_for_ssm_role" {
  source     = "./iam_role"
  name       = "ec2-for-ssm"
  identifier = "ec2.amazonaws.com"
  policy     = data.aws_iam_policy_document.ec2_for_ssm.json
}

# profileをEC2インスタンスへ紐付ける
resource "aws_iam_instance_profile" "ec2_for_ssm" {
  name = "ec2-for-ssm"
  role = module.ec2_for_ssm_role.iam_role_name
}

# オペレーション用EC2インスタンス
resource "aws_instance" "example_for_operation" {
  # Amazon Linux 2
  ami                  = "ami-0f9ae750e8274075b"
  instance_type        = "t2.micro"
  iam_instance_profile = aws_iam_instance_profile.ec2_for_ssm.name
  subnet_id            = data.aws_subnet.private_az1.id
  user_data            = file("./user_data.sh")
  tags = {
   Name = "ecs_for_operation"
  }
}

output "operation_instance_id" {
  value = aws_instance.example_for_operation.id
}

# オペレーションログを保存するS3バケット
resource "aws_s3_bucket" "operation" {
  bucket = "test-ivy-operation-pragmatic-terraform-on-aws"

  lifecycle_rule {
    enabled = true

    expiration {
      days = "180"
    }
  }
}

# CloudWatch Logsログ保存先
resource "aws_cloudwatch_log_group" "operation" {
  name              = "/operation"
  retention_in_days = 180
}

resource "aws_ssm_document" "session_manager_run_shell" {
  # nameがこれで固定
  name            = "SSM-SessionManagerRunShell"
  document_type   = "Session"
  document_format = "JSON"

  content = <<EOF
  {
    "schemaVersion": "1.0",
    "description": "Document to hold regional settings for Session Manager",
    "sessionType": "Standard_Stream",
    "inputs": {
      "s3BucketName": "${aws_s3_bucket.operation.id}",
      "cloudWatchLogGroupName": "${aws_cloudwatch_log_group.operation.name}"
    }
  }
EOF
}

/*
terraformブロックを定義することでTerraformが現在管理しているリソース情報をリモートで管理することができます。
これによりバックアップや多人数開発が可能になるため、基本的にterraformブロックは使用することが好ましいです。
AWSであればS3を、GCPであればGCSを使用すると良いでしょう。また、terraformブロックで指定するS3(GCS)は先に作成する必要があります。
terraform {
  backend "s3" {
    bucket = "<YOUR S3 BUCKET>"
    key    = "terraform.tfstate"
    region = "ap-northeast-1"
  }
}
variable "env" {
  description = "環境名"
  default     = "dev"
}
条件分岐は三項演算子として記述することが可能です。
1環境しか作成しない場合は基本使用しませんが、複数環境作成する場合環境依存になってしまう箇所が発生します。その環境によって異なる値を振り分けるために使用することが多いです。
locals {
  cidr = "${ env == "prd" ? "10.0.0.0/16" : "172.16.0.0/16" }"
}
resource "aws_vpc" "main" {
  cidr_block = "${locals.cidr}"
}
*/
